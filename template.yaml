AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless multi-tier application leveraging AWS Bedrock for AI-powered document analysis

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod

  OpenSearchMasterPassword:
    Type: String
    NoEcho: true
    Description: Master password for OpenSearch domain
    MinLength: 8
    MaxLength: 32
    AllowedPattern: ^[a-zA-Z0-9!@#$%^&*()_+\-=\[\]{};':"\\|,.<>\/?]+$
    ConstraintDescription: Password must be between 8 and 32 characters and can only contain alphanumeric characters and special characters.

Resources:
  # VPC and Networking
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.4.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-subnet-2

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-1

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt ElasticIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-nat-2

  ElasticIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  ElasticIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-rt

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
    DependsOn: VPCGatewayAttachment

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt-1

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-private-rt-2

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # VPC Endpoints
  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2
      VpcEndpointType: Gateway

  SecretsManagerEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      VpcEndpointType: Interface
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      SecurityGroupIds:
        - !Ref LambdaSecurityGroup

  # CloudWatch Log Groups
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${AWS::StackName}
      RetentionInDays: 30

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-lambda-execution-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  # S3 Bucket Policies
  DocumentsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DocumentsBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: EnforceSSLOnly
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub arn:aws:s3:::${DocumentsBucket}
              - !Sub arn:aws:s3:::${DocumentsBucket}/*
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: EnforceEncryption
            Effect: Deny
            Principal: '*'
            Action: 's3:*'
            Resource:
              - !Sub arn:aws:s3:::${DocumentsBucket}
              - !Sub arn:aws:s3:::${DocumentsBucket}/*
            Condition:
              StringNotEquals:
                s3:x-amz-server-side-encryption: aws:kms

  # Secrets Manager
  SecretsManagerSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-secrets
      Description: Secrets for the DocumentAI application
      GenerateSecretString:
        SecretStringTemplate: '{"username": "admin"}'
        GenerateStringKey: "password"
        PasswordLength: 32
        ExcludeCharacters: '"@/\'

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AWS::StackName}-user-pool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AWS::StackName}-client
      UserPoolId: !Ref CognitoUserPool
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO

  # DynamoDB Tables
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-documents
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  AnalysisTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-analysis
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
      KeySchema:
        - AttributeName: documentId
          KeyType: HASH

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-chat-history
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE

  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-users
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  TenantsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-tenants
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH

  SettingsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-settings
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH

  NotificationsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-notifications
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: id
          KeyType: RANGE

  # S3 Bucket
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-documents-${AWS::AccountId}
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
            AllowedOrigins:
              - "*"
            MaxAge: 3000

  # Lambda Functions
  DocumentAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: documentAnalysis.handler
      Runtime: nodejs18.x
      Timeout: 300
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysisTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - textract:*
              Resource: '*'
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Ref DocumentsTable
          ANALYSIS_TABLE: !Ref AnalysisTable
          BUCKET_NAME: !Ref DocumentsBucket
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        DocumentAnalysisEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/analyze-event
            Method: POST

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: chat.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ChatHistoryTable
        - DynamoDBCrudPolicy:
            TableName: !Ref AnalysisTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Environment:
        Variables:
          CHAT_HISTORY_TABLE: !Ref ChatHistoryTable
          ANALYSIS_TABLE: !Ref AnalysisTable
          DOCUMENTS_TABLE: !Ref DocumentsTable
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        Chat:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /chat
            Method: POST

  DocumentApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: documentApi.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - S3CrudPolicy:
            BucketName: !Ref DocumentsBucket
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Ref DocumentsTable
          BUCKET_NAME: !Ref DocumentsBucket
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        GetDocumentsApi:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents-api
            Method: GET
        CreateDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents
            Method: POST
        GetDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/{documentId}
            Method: GET
        DeleteDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/{documentId}
            Method: DELETE
        DownloadDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/{documentId}/download
            Method: GET

  UserApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: userApi.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          USERS_TABLE: !Ref UsersTable
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: GET
        CreateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users
            Method: POST
        GetUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}
            Method: GET
        UpdateUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}
            Method: PUT
        DeleteUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}
            Method: DELETE

  TenantApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: tenantApi.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref TenantsTable
      Environment:
        Variables:
          TENANTS_TABLE: !Ref TenantsTable
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        GetTenants:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants
            Method: GET
        CreateTenant:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants
            Method: POST
        GetTenant:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants/{tenantId}
            Method: GET
        UpdateTenant:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants/{tenantId}
            Method: PUT
        DeleteTenant:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /tenants/{tenantId}
            Method: DELETE

  NotificationsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: notificationsApi.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
          USERS_TABLE: !Ref UsersTable
      Events:
        GetNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications
            Method: get
        MarkNotificationAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/{id}/read
            Method: put
        DeleteNotification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/{id}
            Method: delete
        MarkAllNotificationsAsRead:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/read-all
            Method: put
        ClearAllNotifications:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/clear-all
            Method: delete
        GetUnreadNotificationCount:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/unread-count
            Method: get
        CreateNotification:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/create
            Method: post
        CreateNotificationForCurrentUser:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/create-for-current-user
            Method: post
        CreateNotificationForAllUsers:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/create-for-all-users
            Method: post
        CreateNotificationForUsersWithRole:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /notifications/create-for-users-with-role
            Method: post

  SettingsApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: settingsApi.getSettings
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SettingsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          SETTINGS_TABLE: !Ref SettingsTable
          USERS_TABLE: !Ref UsersTable
      Events:
        GetSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /settings
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /settings
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        GetNotificationPreferences:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /settings/notification-preferences
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateNotificationPreferences:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /settings/notification-preferences
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer
        GetSystemSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /settings/system
            Method: GET
            Auth:
              Authorizer: CognitoAuthorizer
        UpdateSystemSettings:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /settings/system
            Method: PUT
            Auth:
              Authorizer: CognitoAuthorizer

  EtlEmbeddingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: etlEmbedding.handler
      Runtime: nodejs18.x
      Timeout: 60
      MemorySize: 512
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref DocumentsBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Ref DocumentsTable
          BUCKET_NAME: !Ref DocumentsBucket
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          SECRETS_ARN: !Ref SecretsManagerSecret

  BedrockKnowledgeBaseApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: bedrockKnowledgeBaseApi.handler
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Environment:
        Variables:
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        BedrockKnowledgeBase:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /bedrock/knowledge-base
            Method: ANY

  BedrockAgentApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: bedrockAgentApi.handler
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Environment:
        Variables:
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        BedrockAgent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /bedrock/agent
            Method: ANY

  BedrockGuardrailApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: bedrockGuardrailApi.handler
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeModel
              Resource: '*'
      Environment:
        Variables:
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        BedrockGuardrail:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /bedrock/guardrail
            Method: ANY

  OpenSearchApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: opensearchApi.handler
      Runtime: nodejs18.x
      Timeout: 10
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1
          - !Ref PrivateSubnet2
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - es:ESHttp*
              Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-opensearch/*
      Environment:
        Variables:
          OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
          SECRETS_ARN: !Ref SecretsManagerSecret
      Events:
        OpenSearch:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /search
            Method: ANY

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda functions
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # OpenSearch Domain
  OpenSearchDomain:
    Type: AWS::OpenSearchService::Domain
    Properties:
      DomainName: !Sub ${AWS::StackName}-opensearch
      EngineVersion: OpenSearch_2.5
      ClusterConfig:
        InstanceType: t3.small.search
        InstanceCount: 1
        ZoneAwarenessEnabled: false
      EBSOptions:
        EBSEnabled: true
        VolumeSize: 10
        VolumeType: gp2
      DomainEndpointOptions:
        EnforceHTTPS: true
        TLSSecurityPolicy: Policy-Min-TLS-1-2-2019-07
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action: es:*s
            Resource: !Sub arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/${AWS::StackName}-opensearch/*
      EncryptionAtRestOptions:
        Enabled: true
      NodeToNodeEncryptionOptions:
        Enabled: true
      AdvancedSecurityOptions:
        Enabled: true
        InternalUserDatabaseEnabled: true
        MasterUserOptions:
          MasterUserName: admin
          MasterUserPassword: !Ref OpenSearchMasterPassword
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-opensearch

  # CloudWatch Alarms
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-error-alarm
      AlarmDescription: Alarm for Lambda function errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DocumentAnalysisFunction
      AlarmActions:
        - !Ref AlarmNotificationTopic

  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-lambda-throttle-alarm
      AlarmDescription: Alarm for Lambda function throttling
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DocumentAnalysisFunction
      AlarmActions:
        - !Ref AlarmNotificationTopic

  ApiGatewayErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-apigateway-error-alarm
      AlarmDescription: Alarm for API Gateway errors
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGateway
      AlarmActions:
        - !Ref AlarmNotificationTopic

  OpenSearchClusterStatusAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-opensearch-cluster-status-alarm
      AlarmDescription: Alarm for OpenSearch cluster status
      MetricName: ClusterStatus.red
      Namespace: AWS/ES
      Statistic: Maximum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: DomainName
          Value: !Ref OpenSearchDomain
        - Name: ClientId
          Value: !Ref AWS::AccountId
      AlarmActions:
        - !Ref AlarmNotificationTopic

  # SNS Topic for alarms
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${AWS::StackName}-alarm-notifications
      TopicName: !Sub ${AWS::StackName}-alarm-notifications

  # CloudTrail for API activity tracking
  CloudTrail:
    Type: AWS::CloudTrail::Trail
    Properties:
      TrailName: !Sub ${AWS::StackName}-trail
      S3BucketName: !Ref CloudTrailBucket
      IsLogging: true 
      IncludeGlobalServiceEvents: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      CloudWatchLogsLogGroupArn: !GetAtt CloudTrailLogGroup.Arn
      CloudWatchLogsRoleArn: !GetAtt CloudTrailLogsRole.Arn

  CloudTrailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-cloudtrail-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
              KMSMasterKeyID: !Ref KmsKey

  CloudTrailBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref CloudTrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !Sub arn:aws:s3:::${CloudTrailBucket}
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub arn:aws:s3:::${CloudTrailBucket}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  CloudTrailLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/cloudtrail/${AWS::StackName}
      RetentionInDays: 30

  CloudTrailLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-cloudtrail-logs-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CloudTrailLogsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt CloudTrailLogGroup.Arn

  # X-Ray for distributed tracing
  XRayServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-xray-service-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: xray.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess

  # Security Hub for security posture management
  SecurityHub:
    Type: AWS::SecurityHub::Hub
    Properties:
      EnableDefaultStandards: true
      Tags:
        Name: !Sub ${AWS::StackName}-security-hub

  # KMS Key for encryption
  KmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for DocumentAI application encryption
      EnableKeyRotation: true
      KeyPolicy:
        Version: '2012-10-17'
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
            Action: kms:*
            Resource: '*'
          - Sid: Allow CloudTrail to encrypt logs
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: '*'
          - Sid: Allow CloudWatch Logs to encrypt logs
            Effect: Allow
            Principal:
              Service: logs.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: '*'
          - Sid: Allow S3 to encrypt objects
            Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: '*'
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-kms-key

  KmsKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
      AliasName: !Sub alias/${AWS::StackName}-key
      TargetKeyId: !Ref KmsKey

  # SNS Topics for notifications
  DocumentAnalysisNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Document Analysis Notifications
      TopicName: !Sub ${AWS::StackName}-document-analysis-notifications

  SystemMaintenanceNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: System Maintenance Notifications
      TopicName: !Sub ${AWS::StackName}-system-maintenance-notifications

  UserRoleChangeNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: User Role Change Notifications
      TopicName: !Sub ${AWS::StackName}-user-role-change-notifications

  TenantCreationNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Tenant Creation Notifications
      TopicName: !Sub ${AWS::StackName}-tenant-creation-notifications

  # Notification Handler Lambda Functions
  DocumentAnalysisNotificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: notificationHandler.processDocumentAnalysisNotification
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
      Environment:
        Variables:
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
      Events:
        DocumentAnalysisNotification:
          Type: SNS
          Properties:
            Topic: !Ref DocumentAnalysisNotificationTopic

  SystemMaintenanceNotificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: notificationHandler.processSystemMaintenanceNotification
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
        - DynamoDBReadPolicy:
            TableName: !Ref UsersTable
      Environment:
        Variables:
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
          USERS_TABLE: !Ref UsersTable
      Events:
        SystemMaintenanceNotification:
          Type: SNS
          Properties:
            Topic: !Ref SystemMaintenanceNotificationTopic

  UserRoleChangeNotificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: notificationHandler.processUserRoleChangeNotification
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
      Environment:
        Variables:
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
      Events:
        UserRoleChangeNotification:
          Type: SNS
          Properties:
            Topic: !Ref UserRoleChangeNotificationTopic

  TenantCreationNotificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: notificationHandler.processTenantCreationNotification
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref NotificationsTable
      Environment:
        Variables:
          NOTIFICATIONS_TABLE: !Ref NotificationsTable
      Events:
        TenantCreationNotification:
          Type: SNS
          Properties:
            Topic: !Ref TenantCreationNotificationTopic

  DocumentAnalysisApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/
      Handler: documentAnalysisApi.handler
      Runtime: nodejs18.x
      Timeout: 30
      MemorySize: 256
      Role: !GetAtt LambdaExecutionRole.Arn
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DocumentsTable
        - SNSPublishMessagePolicy:
            TopicName: !GetAtt DocumentAnalysisNotificationTopic.TopicName
      Environment:
        Variables:
          DOCUMENTS_TABLE: !Ref DocumentsTable
          DOCUMENT_ANALYSIS_NOTIFICATION_TOPIC_ARN: !Ref DocumentAnalysisNotificationTopic
      Events:
        GetDocumentsForAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/analysis
            Method: get
        UploadDocumentForAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/analysis/upload
            Method: post
        AnalyzeDocument:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/analysis/analyze
            Method: post
        GetDocumentAnalysis:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /documents/analysis/{documentId}
            Method: get

  # Bedrock IAM Roles
  BedrockModelRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'

  BedrockKnowledgeBaseRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'

  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: BedrockFullAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: '*'

  # Bedrock Resources
  BedrockKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Sub ${AWS::StackName}-knowledge-base
      Description: Knowledge base for document analysis
      RoleArn: !GetAtt BedrockKnowledgeBaseRole.Arn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v1
      StorageConfiguration:
        Type: OPENSEARCH_SERVERLESS
        OpensearchServerlessConfiguration:
          CollectionArn: !Sub arn:aws:aoss:${AWS::Region}:${AWS::AccountId}:collection/${AWS::StackName}-knowledge-base
          FieldMapping:
            VectorField: vector
            TextField: text
            MetadataField: metadata
          VectorIndexName: !Sub ${AWS::StackName}-vector-index

  BedrockAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Sub ${AWS::StackName}-document-agent
      Description: "Agent for document analysis and chat"
      Instruction: "You are an AI assistant that helps users analyze and understand their documents."
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      FoundationModel: "anthropic.claude-v2"  # Required parameter - foundation model
      IdleSessionTTLInSeconds: 900  # Required parameter - session timeout
      KnowledgeBases:
        - KnowledgeBaseId: !Ref BedrockKnowledgeBase
          Description: "Document analysis knowledge base"
          KnowledgeBaseState: "ENABLED"

Outputs:
  ApiGatewayEndpoint:
    Description: The URL of the API Gateway
    Value: !Sub https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
    Export:
      Name: !Sub ${AWS::StackName}-ApiGatewayEndpoint
  
  CognitoUserPoolId:
    Description: The ID of the Cognito User Pool
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolId
  
  CognitoUserPoolClientId:
    Description: The ID of the Cognito User Pool Client
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub ${AWS::StackName}-CognitoUserPoolClientId
