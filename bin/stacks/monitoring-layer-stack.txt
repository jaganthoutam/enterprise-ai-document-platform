import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { BaseStack, BaseStackProps } from './base-stack';

export interface MonitoringLayerStackProps extends BaseStackProps {
  readonly vpc: cdk.aws_ec2.Vpc;
  readonly apiGateway: cdk.aws_apigateway.RestApi;
  readonly lambdaFunctions: Record<string, cdk.aws_lambda.Function>;
  readonly dynamoTable: cdk.aws_dynamodb.Table;
  readonly rdsInstance: cdk.aws_rds.DatabaseInstance;
}

export class MonitoringLayerStack extends BaseStack {
  constructor(scope: Construct, id: string, props: MonitoringLayerStackProps) {
    super(scope, id, props);

    // Create CloudWatch Logs Log Group
    const appLogGroup = new cdk.aws_logs.LogGroup(this, 'AppLogGroup', {
      logGroupName: `/aws/${props.projectName}/${props.stage}`,
      retention: cdk.aws_logs.RetentionDays.ONE_MONTH,
    });

    // Create CloudWatch Dashboard
    const dashboard = new cdk.aws_cloudwatch.Dashboard(this, 'MainDashboard', {
      dashboardName: `${props.projectName}-${props.stage}-dashboard`,
    });

    // Add API Gateway metrics to dashboard
    dashboard.addWidgets(
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'API Gateway - Request Count',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/ApiGateway',
            metricName: 'Count',
            dimensionsMap: {
              ApiName: props.apiGateway.restApiName,
              Stage: props.stage,
            },
            statistic: 'Sum',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 12,
      }),
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'API Gateway - Latency',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/ApiGateway',
            metricName: 'Latency',
            dimensionsMap: {
              ApiName: props.apiGateway.restApiName,
              Stage: props.stage,
            },
            statistic: 'Average',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 12,
      })
    );

    // Add Lambda function metrics to dashboard
    const lambdaWidgets: cdk.aws_cloudwatch.IWidget[] = [];
    
    Object.entries(props.lambdaFunctions).forEach(([name, func]) => {
      lambdaWidgets.push(
        new cdk.aws_cloudwatch.GraphWidget({
          title: `Lambda - ${name} - Invocations`,
          left: [
            new cdk.aws_cloudwatch.Metric({
              namespace: 'AWS/Lambda',
              metricName: 'Invocations',
              dimensionsMap: {
                FunctionName: func.functionName,
              },
              statistic: 'Sum',
              period: cdk.Duration.minutes(1),
            }),
          ],
          width: 8,
        }),
        new cdk.aws_cloudwatch.GraphWidget({
          title: `Lambda - ${name} - Duration`,
          left: [
            new cdk.aws_cloudwatch.Metric({
              namespace: 'AWS/Lambda',
              metricName: 'Duration',
              dimensionsMap: {
                FunctionName: func.functionName,
              },
              statistic: 'Average',
              period: cdk.Duration.minutes(1),
            }),
          ],
          width: 8,
        }),
        new cdk.aws_cloudwatch.GraphWidget({
          title: `Lambda - ${name} - Errors`,
          left: [
            new cdk.aws_cloudwatch.Metric({
              namespace: 'AWS/Lambda',
              metricName: 'Errors',
              dimensionsMap: {
                FunctionName: func.functionName,
              },
              statistic: 'Sum',
              period: cdk.Duration.minutes(1),
            }),
          ],
          width: 8,
        })
      );
    });

    dashboard.addWidgets(...lambdaWidgets);

    // Add DynamoDB metrics to dashboard
    dashboard.addWidgets(
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'DynamoDB - Read Capacity Units',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/DynamoDB',
            metricName: 'ConsumedReadCapacityUnits',
            dimensionsMap: {
              TableName: props.dynamoTable.tableName,
            },
            statistic: 'Sum',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 12,
      }),
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'DynamoDB - Write Capacity Units',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/DynamoDB',
            metricName: 'ConsumedWriteCapacityUnits',
            dimensionsMap: {
              TableName: props.dynamoTable.tableName,
            },
            statistic: 'Sum',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 12,
      })
    );

    // Add RDS metrics to dashboard
    dashboard.addWidgets(
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'RDS - CPU Utilization',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/RDS',
            metricName: 'CPUUtilization',
            dimensionsMap: {
              DBInstanceIdentifier: props.rdsInstance.instanceIdentifier,
            },
            statistic: 'Average',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 8,
      }),
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'RDS - Database Connections',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/RDS',
            metricName: 'DatabaseConnections',
            dimensionsMap: {
              DBInstanceIdentifier: props.rdsInstance.instanceIdentifier,
            },
            statistic: 'Average',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 8,
      }),
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'RDS - Free Storage Space',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/RDS',
            metricName: 'FreeStorageSpace',
            dimensionsMap: {
              DBInstanceIdentifier: props.rdsInstance.instanceIdentifier,
            },
            statistic: 'Average',
            period: cdk.Duration.minutes(1),
          }),
        ],
        width: 8,
      })
    );

    // Create CloudWatch Alarms
    
    // API Gateway Latency Alarm
    const apiLatencyAlarm = new cdk.aws_cloudwatch.Alarm(this, 'ApiLatencyAlarm', {
      alarmName: `${props.projectName}-${props.stage}-api-latency`,
      metric: new cdk.aws_cloudwatch.Metric({
        namespace: 'AWS/ApiGateway',
        metricName: 'Latency',
        dimensionsMap: {
          ApiName: props.apiGateway.restApiName,
          Stage: props.stage,
        },
        statistic: 'p95',
        period: cdk.Duration.minutes(5),
      }),
      threshold: 3000, // 3 seconds
      evaluationPeriods: 3,
      datapointsToAlarm: 2,
      comparisonOperator: cdk.aws_cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
      treatMissingData: cdk.aws_cloudwatch.TreatMissingData.NOT_BREACHING,
    });

    // Lambda Errors Alarm
    const lambdaErrorsAlarms: cdk.aws_cloudwatch.Alarm[] = [];

    Object.entries(props.lambdaFunctions).forEach(([name, func]) => {
      lambdaErrorsAlarms.push(
        new cdk.aws_cloudwatch.Alarm(this, `${name}ErrorsAlarm`, {
          alarmName: `${props.projectName}-${props.stage}-${name}-errors`,
          metric: new cdk.aws_cloudwatch.Metric({
            namespace: 'AWS/Lambda',
            metricName: 'Errors',
            dimensionsMap: {
              FunctionName: func.functionName,
            },
            statistic: 'Sum',
            period: cdk.Duration.minutes(5),
          }),
          threshold: 5,
          evaluationPeriods: 3,
          datapointsToAlarm: 2,
          comparisonOperator: cdk.aws_cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
          treatMissingData: cdk.aws_cloudwatch.TreatMissingData.NOT_BREACHING,
        })
      );
    });

    // RDS CPU Utilization Alarm
    const rdsCpuAlarm = new cdk.aws_cloudwatch.Alarm(this, 'RdsCpuAlarm', {
      alarmName: `${props.projectName}-${props.stage}-rds-cpu`,
      metric: new cdk.aws_cloudwatch.Metric({
        namespace: 'AWS/RDS',
        metricName: 'CPUUtilization',
        dimensionsMap: {
          DBInstanceIdentifier: props.rdsInstance.instanceIdentifier,
        },
        statistic: 'Average',
        period: cdk.Duration.minutes(5),
      }),
      threshold: 80,
      evaluationPeriods: 3,
      datapointsToAlarm: 3,
      comparisonOperator: cdk.aws_cloudwatch.ComparisonOperator.GREATER_THAN_THRESHOLD,
      treatMissingData: cdk.aws_cloudwatch.TreatMissingData.MISSING,
    });

    // Create SNS Topic for alarms
    const alarmsTopic = new cdk.aws_sns.Topic(this, 'AlarmsTopic', {
      topicName: `${props.projectName}-${props.stage}-alarms`,
      displayName: `${props.projectName} ${props.stage} Alarms`,
    });

    // Add subscription to the topic (email)
    new cdk.aws_sns.Subscription(this, 'AlarmsEmailSubscription', {
      topic: alarmsTopic,
      protocol: cdk.aws_sns.SubscriptionProtocol.EMAIL,
      endpoint: 'alerts@example.com', // Replace with your email
    });

    // Add actions to alarms
    apiLatencyAlarm.addAlarmAction(new cdk.aws_cloudwatch_actions.SnsAction(alarmsTopic));
    lambdaErrorsAlarms.forEach(alarm => {
      alarm.addAlarmAction(new cdk.aws_cloudwatch_actions.SnsAction(alarmsTopic));
    });
    rdsCpuAlarm.addAlarmAction(new cdk.aws_cloudwatch_actions.SnsAction(alarmsTopic));

    // Enable X-Ray Tracing
    const xrayRole = new cdk.aws_iam.Role(this, 'XRayRole', {
      assumedBy: new cdk.aws_iam.ServicePrincipal('xray.amazonaws.com'),
    });

    xrayRole.addManagedPolicy(
      cdk.aws_iam.ManagedPolicy.fromAwsManagedPolicyName('AWSXRayDaemonWriteAccess')
    );

    // Set up CloudTrail
    const cloudTrailBucket = new cdk.aws_s3.Bucket(this, 'CloudTrailBucket', {
      bucketName: `${props.projectName}-${props.stage}-cloudtrail-${this.account}`,
      encryption: cdk.aws_s3.BucketEncryption.S3_MANAGED,
      blockPublicAccess: cdk.aws_s3.BlockPublicAccess.BLOCK_ALL,
      enforceSSL: true,
      removalPolicy: cdk.RemovalPolicy.RETAIN,
    });

    const trail = new cdk.aws_cloudtrail.Trail(this, 'CloudTrail', {
      trailName: `${props.projectName}-${props.stage}-trail`,
      bucket: cloudTrailBucket,
      isMultiRegionTrail: true,
      enableFileValidation: true,
      includeGlobalServiceEvents: true,
      sendToCloudWatchLogs: true,
      cloudWatchLogsRetention: cdk.aws_logs.RetentionDays.ONE_MONTH,
    });

    // Set up QuickSight
    // Note: QuickSight is not fully supported by CDK yet, so we'll use a custom resource
    
    // Create QuickSight IAM role
    const quickSightRole = new cdk.aws_iam.Role(this, 'QuickSightRole', {
      assumedBy: new cdk.aws_iam.ServicePrincipal('quicksight.amazonaws.com'),
      description: 'Role for QuickSight to access resources',
    });

    // Add permissions to QuickSight role
    quickSightRole.addToPrincipalPolicy(
      new cdk.aws_iam.PolicyStatement({
        effect: cdk.aws_iam.Effect.ALLOW,
        actions: [
          'athena:BatchGetQueryExecution',
          'athena:GetQueryExecution',
          'athena:GetQueryResults',
          'athena:StartQueryExecution',
          'athena:StopQueryExecution',
          'athena:ListDatabases',
          'athena:ListTableMetadata',
          'athena:GetTableMetadata'
        ],
        resources: ['*'],
      })
    );

    quickSightRole.addToPrincipalPolicy(
      new cdk.aws_iam.PolicyStatement({
        effect: cdk.aws_iam.Effect.ALLOW,
        actions: [
          's3:GetBucketLocation',
          's3:GetObject',
          's3:ListBucket',
          's3:ListBucketMultipartUploads',
          's3:ListMultipartUploadParts',
          's3:AbortMultipartUpload',
          's3:CreateBucket',
          's3:PutObject',
          's3:PutBucketPublicAccessBlock'
        ],
        resources: [
          `arn:aws:s3:::${props.projectName}-${props.stage}-quicksight-*`,
          `arn:aws:s3:::${props.projectName}-${props.stage}-quicksight-*/*`,
        ],
      })
    );

    quickSightRole.addToPrincipalPolicy(
      new cdk.aws_iam.PolicyStatement({
        effect: cdk.aws_iam.Effect.ALLOW,
        actions: [
          'glue:GetTable',
          'glue:GetTables',
          'glue:GetDatabase',
          'glue:GetDatabases',
          'glue:GetPartitions',
          'glue:GetPartition'
        ],
        resources: ['*'],
      })
    );

    // Create Lambda function for custom metrics
    const customMetricsFunction = new cdk.aws_lambda.Function(this, 'CustomMetricsFunction', {
      runtime: cdk.aws_lambda.Runtime.NODEJS_18_X,
      handler: 'index.handler',
      code: cdk.aws_lambda.Code.fromInline(`
        const { CloudWatchClient, PutMetricDataCommand } = require('@aws-sdk/client-cloudwatch');
        
        exports.handler = async (event) => {
          const cloudwatch = new CloudWatchClient({ region: process.env.AWS_REGION });
          
          try {
            const timestamp = new Date();
            
            // Example of custom business metrics
            const command = new PutMetricDataCommand({
              Namespace: '${props.projectName}/${props.stage}/Business',
              MetricData: [
                {
                  MetricName: 'UserSignups',
                  Dimensions: [
                    {
                      Name: 'Environment',
                      Value: '${props.stage}'
                    }
                  ],
                  Value: event.userSignups || 0,
                  Timestamp: timestamp,
                  Unit: 'Count'
                },
                {
                  MetricName: 'DocumentUploads',
                  Dimensions: [
                    {
                      Name: 'Environment',
                      Value: '${props.stage}'
                    }
                  ],
                  Value: event.documentUploads || 0,
                  Timestamp: timestamp,
                  Unit: 'Count'
                },
                {
                  MetricName: 'AIQueryCount',
                  Dimensions: [
                    {
                      Name: 'Environment',
                      Value: '${props.stage}'
                    }
                  ],
                  Value: event.aiQueryCount || 0,
                  Timestamp: timestamp,
                  Unit: 'Count'
                }
              ]
            });
            
            await cloudwatch.send(command);
            return { statusCode: 200, body: 'Metrics published successfully' };
          } catch (error) {
            console.error('Error publishing metrics:', error);
            return { statusCode: 500, body: \`Error publishing metrics: \${error.message}\` };
          }
        };
      `),
      timeout: cdk.Duration.seconds(30),
      memorySize: 128,
      description: 'Lambda function for publishing custom business metrics',
    });

    // Grant CloudWatch permissions to custom metrics function
    customMetricsFunction.addToRolePolicy(
      new cdk.aws_iam.PolicyStatement({
        effect: cdk.aws_iam.Effect.ALLOW,
        actions: [
          'cloudwatch:PutMetricData',
        ],
        resources: ['*'],
      })
    );

    // Create EventBridge rule to trigger custom metrics function
    new cdk.aws_events.Rule(this, 'DailyMetricsRule', {
      schedule: cdk.aws_events.Schedule.cron({ 
        minute: '0',
        hour: '1',
        weekDay: '*',
        month: '*',
        year: '*'
      }),
      description: 'Daily business metrics collection',
      targets: [
        new cdk.aws_events_targets.LambdaFunction(customMetricsFunction, {
          event: cdk.aws_events.RuleTargetInput.fromObject({
            source: 'scheduled-event',
            time: new Date().toISOString(),
          }),
        }),
      ],
    });

    // Create CloudWatch Metric Filters
    new cdk.aws_logs.MetricFilter(this, 'ErrorMetricFilter', {
      logGroup: appLogGroup,
      filterPattern: cdk.aws_logs.FilterPattern.literal('ERROR'),
      metricNamespace: `${props.projectName}/${props.stage}`,
      metricName: 'ErrorCount',
      defaultValue: 0,
      metricValue: '1',
    });

    new cdk.aws_logs.MetricFilter(this, 'AuthFailureMetricFilter', {
      logGroup: appLogGroup,
      filterPattern: cdk.aws_logs.FilterPattern.literal('Authentication failure'),
      metricNamespace: `${props.projectName}/${props.stage}`,
      metricName: 'AuthFailureCount',
      defaultValue: 0,
      metricValue: '1',
    });

    // Create Dashboard for business metrics
    const businessDashboard = new cdk.aws_cloudwatch.Dashboard(this, 'BusinessDashboard', {
      dashboardName: `${props.projectName}-${props.stage}-business-dashboard`,
    });

    businessDashboard.addWidgets(
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'User Signups',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: `${props.projectName}/${props.stage}/Business`,
            metricName: 'UserSignups',
            dimensionsMap: {
              Environment: props.stage,
            },
            statistic: 'Sum',
            period: cdk.Duration.days(1),
          }),
        ],
        width: 8,
      }),
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'Document Uploads',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: `${props.projectName}/${props.stage}/Business`,
            metricName: 'DocumentUploads',
            dimensionsMap: {
              Environment: props.stage,
            },
            statistic: 'Sum',
            period: cdk.Duration.days(1),
          }),
        ],
        width: 8,
      }),
      new cdk.aws_cloudwatch.GraphWidget({
        title: 'AI Query Count',
        left: [
          new cdk.aws_cloudwatch.Metric({
            namespace: `${props.projectName}/${props.stage}/Business`,
            metricName: 'AIQueryCount',
            dimensionsMap: {
              Environment: props.stage,
            },
            statistic: 'Sum',
            period: cdk.Duration.days(1),
          }),
        ],
        width: 8,
      })
    );

    // Outputs
    this.createOutput('MainDashboardName', dashboard.dashboardName, 'Main CloudWatch Dashboard Name');
    this.createOutput('BusinessDashboardName', businessDashboard.dashboardName, 'Business CloudWatch Dashboard Name');
    this.createOutput('AlarmsTopicArn', alarmsTopic.topicArn, 'Alarms SNS Topic ARN');
    this.createOutput('CloudTrailBucketName', cloudTrailBucket.bucketName, 'CloudTrail S3 Bucket Name');

    // SSM Parameters
    this.createSsmParameter('MainDashboardName', dashboard.dashboardName);
    this.createSsmParameter('BusinessDashboardName', businessDashboard.dashboardName);
    this.createSsmParameter('AlarmsTopicArn', alarmsTopic.topicArn);
    this.createSsmParameter('CloudTrailBucketName', cloudTrailBucket.bucketName);
  }
}