import * as cdk from 'aws-cdk-lib';
import { Construct } from 'constructs';
import { BaseStack, BaseStackProps } from './base-stack';

export interface ClientLayerStackProps extends BaseStackProps {
  readonly apiEndpoint: string;
  readonly cloudfrontDistribution: cdk.aws_cloudfront.Distribution;
  readonly userPool: cdk.aws_cognito.UserPool;
}

export class ClientLayerStack extends BaseStack {
  public readonly webAppBucket: cdk.aws_s3.Bucket;
  public readonly webDistribution: cdk.aws_cloudfront.Distribution;
  public readonly mobileBuildPipeline: cdk.aws_codepipeline.Pipeline;

  constructor(scope: Construct, id: string, props: ClientLayerStackProps) {
    super(scope, id, props);

    // S3 bucket for web app hosting
    this.webAppBucket = new cdk.aws_s3.Bucket(this, 'WebAppBucket', {
      bucketName: `${props.projectName}-${props.stage}-webapp-${this.account}`,
      websiteIndexDocument: 'index.html',
      websiteErrorDocument: 'index.html',
      publicReadAccess: false,
      blockPublicAccess: cdk.aws_s3.BlockPublicAccess.BLOCK_ALL,
      encryption: cdk.aws_s3.BucketEncryption.S3_MANAGED,
      enforceSSL: true,
      removalPolicy: cdk.RemovalPolicy.RETAIN,
      cors: [
        {
          allowedMethods: [
            cdk.aws_s3.HttpMethods.GET,
            cdk.aws_s3.HttpMethods.HEAD,
          ],
          allowedOrigins: ['*'],
          allowedHeaders: ['*'],
          maxAge: 3000,
        },
      ],
    });

    // CloudFront OAI
    const originAccessIdentity = new cdk.aws_cloudfront.OriginAccessIdentity(this, 'WebAppOAI', {
      comment: `OAI for ${props.projectName} ${props.stage} web app`,
    });

    // Grant read permissions to CloudFront
    this.webAppBucket.addToResourcePolicy(
      new cdk.aws_iam.PolicyStatement({
        actions: ['s3:GetObject'],
        resources: [this.webAppBucket.arnForObjects('*')],
        principals: [
          new cdk.aws_iam.CanonicalUserPrincipal(
            originAccessIdentity.cloudFrontOriginAccessIdentityS3CanonicalUserId
          ),
        ],
      })
    );

    // CloudFront function for security headers
    const securityHeadersFunction = new cdk.aws_cloudfront.Function(this, 'SecurityHeadersFunction', {
      code: cdk.aws_cloudfront.FunctionCode.fromInline(`
        function handler(event) {
          var response = event.response;
          var headers = response.headers;
          
          // Set security headers
          headers['strict-transport-security'] = { value: 'max-age=63072000; includeSubdomains; preload' };
          headers['content-security-policy'] = { value: "default-src 'self'; img-src 'self' data:; script-src 'self'; style-src 'self' 'unsafe-inline'; connect-src 'self' ${props.apiEndpoint} https://*.amazonaws.com;" };
          headers['x-content-type-options'] = { value: 'nosniff' };
          headers['x-frame-options'] = { value: 'DENY' };
          headers['x-xss-protection'] = { value: '1; mode=block' };
          headers['referrer-policy'] = { value: 'same-origin' };
          
          return response;
        }
      `),
      functionName: `${props.projectName}-${props.stage}-security-headers`,
      comment: 'Function to add security headers to CloudFront responses',
    });

    // CloudFront distribution for web app
    this.webDistribution = new cdk.aws_cloudfront.Distribution(this, 'WebAppDistribution', {
      defaultBehavior: {
        origin: new cdk.aws_cloudfront_origins.S3Origin(this.webAppBucket, {
          originAccessIdentity,
        }),
        compress: true,
        allowedMethods: cdk.aws_cloudfront.AllowedMethods.ALLOW_GET_HEAD,
        viewerProtocolPolicy: cdk.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
        cachePolicy: cdk.aws_cloudfront.CachePolicy.CACHING_OPTIMIZED,
        responseHeadersPolicy: cdk.aws_cloudfront.ResponseHeadersPolicy.SECURITY_HEADERS,
        functionAssociations: [
          {
            function: securityHeadersFunction,
            eventType: cdk.aws_cloudfront.FunctionEventType.VIEWER_RESPONSE,
          },
        ],
      },
      additionalBehaviors: {
        '/api/*': {
          origin: new cdk.aws_cloudfront_origins.HttpOrigin(
            props.apiEndpoint.replace('https://', '').replace('/prod', '')
          ),
          allowedMethods: cdk.aws_cloudfront.AllowedMethods.ALLOW_ALL,
          cachePolicy: cdk.aws_cloudfront.CachePolicy.CACHING_DISABLED,
          originRequestPolicy: cdk.aws_cloudfront.OriginRequestPolicy.ALL_VIEWER,
          viewerProtocolPolicy: cdk.aws_cloudfront.ViewerProtocolPolicy.REDIRECT_TO_HTTPS,
        },
      },
      defaultRootObject: 'index.html',
      errorResponses: [
        {
          httpStatus: 404,
          responseHttpStatus: 200,
          responsePagePath: '/index.html',
        },
      ],
      priceClass: cdk.aws_cloudfront.PriceClass.PRICE_CLASS_100,
      enableLogging: true,
      logBucket: new cdk.aws_s3.Bucket(this, 'WebAppLogBucket', {
        encryption: cdk.aws_s3.BucketEncryption.S3_MANAGED,
        blockPublicAccess: cdk.aws_s3.BlockPublicAccess.BLOCK_ALL,
        enforceSSL: true,
        removalPolicy: cdk.RemovalPolicy.RETAIN,
      }),
      logFilePrefix: 'webapp-logs/',
      httpVersion: cdk.aws_cloudfront.HttpVersion.HTTP2_AND_3,
      minimumProtocolVersion: cdk.aws_cloudfront.SecurityPolicyProtocol.TLS_V1_2_2021,
    });

    // S3 bucket for web app deployment artifacts
    const webappArtifactBucket = new cdk.aws_s3.Bucket(this, 'WebAppArtifactBucket', {
      bucketName: `${props.projectName}-${props.stage}-webapp-artifacts-${this.account}`,
      encryption: cdk.aws_s3.BucketEncryption.S3_MANAGED,
      blockPublicAccess: cdk.aws_s3.BlockPublicAccess.BLOCK_ALL,
      enforceSSL: true,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
    });

    // CodeBuild role
    const codeBuildRole = new cdk.aws_iam.Role(this, 'CodeBuildRole', {
      assumedBy: new cdk.aws_iam.ServicePrincipal('codebuild.amazonaws.com'),
      managedPolicies: [
        cdk.aws_iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonS3ReadOnlyAccess'),
      ],
    });

    // Grant S3 write permissions to CodeBuild
    this.webAppBucket.grantReadWrite(codeBuildRole);
    webappArtifactBucket.grantReadWrite(codeBuildRole);

    // Allow CloudFront invalidation
    codeBuildRole.addToPrincipalPolicy(
      new cdk.aws_iam.PolicyStatement({
        actions: ['cloudfront:CreateInvalidation'],
        resources: [this.webDistribution.distributionArn],
      })
    );

    // Create CodeBuild project for web app
    const webAppBuild = new cdk.aws_codebuild.PipelineProject(this, 'WebAppBuild', {
      projectName: `${props.projectName}-${props.stage}-webapp-build`,
      description: `Build project for ${props.projectName} ${props.stage} web app`,
      environment: {
        buildImage: cdk.aws_codebuild.LinuxBuildImage.STANDARD_7_0,
        privileged: true,
      },
      environmentVariables: {
        REACT_APP_API_ENDPOINT: {
          value: `https://${props.cloudfrontDistribution.distributionDomainName}/api`,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        REACT_APP_USER_POOL_ID: {
          value: props.userPool.userPoolId,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        REACT_APP_APP_CLIENT_ID: {
          value: props.userPool.userPoolClientIds[0], // This is an assumption, adjust as needed
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        REACT_APP_REGION: {
          value: this.region,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        REACT_APP_ENV: {
          value: props.stage,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        S3_BUCKET: {
          value: this.webAppBucket.bucketName,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        CLOUDFRONT_DISTRIBUTION_ID: {
          value: this.webDistribution.distributionId,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
      },
      buildSpec: cdk.aws_codebuild.BuildSpec.fromObjectToYaml({
        version: '0.2',
        phases: {
          install: {
            'runtime-versions': {
              nodejs: 18,
            },
            commands: [
              'echo Installing dependencies...',
              'npm install',
            ],
          },
          build: {
            commands: [
              'echo Building web app...',
              'npm run build',
            ],
          },
          post_build: {
            commands: [
              'echo Deploying to S3...',
              'aws s3 sync build/ s3://$S3_BUCKET/ --delete',
              'echo Creating CloudFront invalidation...',
              'aws cloudfront create-invalidation --distribution-id $CLOUDFRONT_DISTRIBUTION_ID --paths "/*"',
            ],
          },
        },
        artifacts: {
          'base-directory': 'build',
          files: ['**/*'],
        },
      }),
      role: codeBuildRole,
    });

    // CodePipeline for Web App
    const webAppSourceOutput = new cdk.aws_codepipeline.Artifact('SourceCode');
    const webAppBuildOutput = new cdk.aws_codepipeline.Artifact('BuildOutput');

    const webAppPipeline = new cdk.aws_codepipeline.Pipeline(this, 'WebAppPipeline', {
      pipelineName: `${props.projectName}-${props.stage}-webapp`,
      artifactBucket: webappArtifactBucket,
      restartExecutionOnUpdate: true,
      stages: [
        {
          stageName: 'Source',
          actions: [
            new cdk.aws_codepipeline_actions.CodeStarConnectionsSourceAction({
              actionName: 'GitHub_Source',
              owner: 'YourGitHubOwner', // Replace with your GitHub owner
              repo: `${props.projectName}-frontend`,
              branch: props.stage === 'prod' ? 'main' : props.stage,
              output: webAppSourceOutput,
              connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-1234-1234-1234-123456789012', // Replace with your connection ARN
            }),
          ],
        },
        {
          stageName: 'Build',
          actions: [
            new cdk.aws_codepipeline_actions.CodeBuildAction({
              actionName: 'BuildAndDeploy',
              project: webAppBuild,
              input: webAppSourceOutput,
              outputs: [webAppBuildOutput],
            }),
          ],
        },
      ],
    });

    // Mobile App Build
    // S3 bucket for mobile app deployment artifacts
    const mobileAppArtifactBucket = new cdk.aws_s3.Bucket(this, 'MobileAppArtifactBucket', {
      bucketName: `${props.projectName}-${props.stage}-mobile-artifacts-${this.account}`,
      encryption: cdk.aws_s3.BucketEncryption.S3_MANAGED,
      blockPublicAccess: cdk.aws_s3.BlockPublicAccess.BLOCK_ALL,
      enforceSSL: true,
      removalPolicy: cdk.RemovalPolicy.DESTROY,
      autoDeleteObjects: true,
    });

    // CodeBuild project for mobile app
    const mobileAppBuildRole = new cdk.aws_iam.Role(this, 'MobileAppBuildRole', {
      assumedBy: new cdk.aws_iam.ServicePrincipal('codebuild.amazonaws.com'),
      managedPolicies: [
        cdk.aws_iam.ManagedPolicy.fromAwsManagedPolicyName('AmazonS3ReadOnlyAccess'),
      ],
    });

    // Grant S3 write permissions to CodeBuild
    mobileAppArtifactBucket.grantReadWrite(mobileAppBuildRole);

    const mobileAppBuild = new cdk.aws_codebuild.PipelineProject(this, 'MobileAppBuild', {
      projectName: `${props.projectName}-${props.stage}-mobile-build`,
      description: `Build project for ${props.projectName} ${props.stage} mobile app`,
      environment: {
        buildImage: cdk.aws_codebuild.LinuxBuildImage.STANDARD_7_0,
        privileged: true,
        computeType: cdk.aws_codebuild.ComputeType.LARGE,
      },
      environmentVariables: {
        EXPO_PUBLIC_API_ENDPOINT: {
          value: `https://${props.cloudfrontDistribution.distributionDomainName}/api`,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        EXPO_PUBLIC_USER_POOL_ID: {
          value: props.userPool.userPoolId,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        EXPO_PUBLIC_APP_CLIENT_ID: {
          value: props.userPool.userPoolClientIds[0], // This is an assumption, adjust as needed
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        EXPO_PUBLIC_REGION: {
          value: this.region,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        EXPO_PUBLIC_ENV: {
          value: props.stage,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
        ARTIFACT_BUCKET: {
          value: mobileAppArtifactBucket.bucketName,
          type: cdk.aws_codebuild.BuildEnvironmentVariableType.PLAINTEXT,
        },
      },
      buildSpec: cdk.aws_codebuild.BuildSpec.fromObjectToYaml({
        version: '0.2',
        phases: {
          install: {
            'runtime-versions': {
              nodejs: 18,
            },
            commands: [
              'echo Installing Expo CLI...',
              'npm install -g expo-cli eas-cli',
              'echo Installing dependencies...',
              'npm install',
            ],
          },
          build: {
            commands: [
              'echo Building mobile app...',
              'expo prebuild --platform android --clean',
              'expo prebuild --platform ios --clean',
              'eas build --platform android --local --non-interactive --output=./build/android.apk',
              'eas build --platform ios --local --non-interactive --output=./build/ios.tar.gz',
            ],
          },
          post_build: {
            commands: [
              'echo Uploading builds to S3...',
              'aws s3 cp ./build/android.apk s3://$ARTIFACT_BUCKET/android-${CODEBUILD_BUILD_NUMBER}.apk',
              'aws s3 cp ./build/ios.tar.gz s3://$ARTIFACT_BUCKET/ios-${CODEBUILD_BUILD_NUMBER}.tar.gz',
            ],
          },
        },
        artifacts: {
          'base-directory': 'build',
          files: ['*.apk', '*.tar.gz'],
        },
      }),
      role: mobileAppBuildRole,
      timeout: cdk.Duration.hours(2),
    });

    // CodePipeline for Mobile App
    const mobileAppSourceOutput = new cdk.aws_codepipeline.Artifact('MobileSourceCode');
    const mobileAppBuildOutput = new cdk.aws_codepipeline.Artifact('MobileBuildOutput');

    this.mobileBuildPipeline = new cdk.aws_codepipeline.Pipeline(this, 'MobileAppPipeline', {
      pipelineName: `${props.projectName}-${props.stage}-mobile`,
      artifactBucket: mobileAppArtifactBucket,
      restartExecutionOnUpdate: true,
      stages: [
        {
          stageName: 'Source',
          actions: [
            new cdk.aws_codepipeline_actions.CodeStarConnectionsSourceAction({
              actionName: 'GitHub_Source',
              owner: 'YourGitHubOwner', // Replace with your GitHub owner
              repo: `${props.projectName}-mobile`,
              branch: props.stage === 'prod' ? 'main' : props.stage,
              output: mobileAppSourceOutput,
              connectionArn: 'arn:aws:codestar-connections:us-east-1:123456789012:connection/12345678-1234-1234-1234-123456789012', // Replace with your connection ARN
            }),
          ],
        },
        {
          stageName: 'Build',
          actions: [
            new cdk.aws_codepipeline_actions.CodeBuildAction({
              actionName: 'BuildMobileApp',
              project: mobileAppBuild,
              input: mobileAppSourceOutput,
              outputs: [mobileAppBuildOutput],
            }),
          ],
        },
      ],
    });

    // Create integration resources for third-party systems
    const apiKey = new cdk.aws_apigateway.ApiKey(this, 'ThirdPartyApiKey', {
      apiKeyName: `${props.projectName}-${props.stage}-third-party-key`,
      description: 'API key for third-party system integration',
      enabled: true,
    });

    // Outputs
    this.createOutput('WebAppUrl', `https://${this.webDistribution.distributionDomainName}`, 'Web App URL');
    this.createOutput('WebAppBucketName', this.webAppBucket.bucketName, 'Web App S3 Bucket Name');
    this.createOutput('MobileAppArtifactBucket', mobileAppArtifactBucket.bucketName, 'Mobile App Artifact Bucket');
    this.createOutput('ApiKey', apiKey.keyId, 'Third-party API Key ID');

    // SSM Parameters
    this.createSsmParameter('WebAppUrl', `https://${this.webDistribution.distributionDomainName}`);
    this.createSsmParameter('WebAppBucketName', this.webAppBucket.bucketName);
    this.createSsmParameter('MobileAppArtifactBucket', mobileAppArtifactBucket.bucketName);
    this.createSsmParameter('ApiKey', apiKey.keyId);
  }
}
      